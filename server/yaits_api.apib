FORMAT: 1A
HOST: http://localhost:5000

# yaits_api

API for yaits

# Group health

Healthcheck endpoint.

## [/health]

### Check service status [GET]
+ Response 200 (application/json)

        {
            "healthy": true,
            "details": ""
        }

## [/health/db]

### Check service status, including DB check [GET]
+ Request
    + Headers

            Authentication: Bearer _JWT_ACCESS_TOKEN_

+ Response 200 (application/json)

        {
            "healthy": true,
            "details": ""
        }

# Group Authentication

Manage accounts and sessions.

## [/auth/register]

### Create a new user account [POST]
+ Request (application/json)

        {
            "username": "TestUser",
            "password": "TestPass",
        }

+ Response 200 (application/json)

        {
            "success": true,
            "user", {
                "uniqueId": "_USER_UUID_",
                "username": "TestUser",
            }
        }

## [/auth/login]

### Login to establish a session [POST]
+ Request (application/json)

        {
            "username": "TestUser",
            "password": "TestPass",
        }

+ Response 200 (application/json)

        {
            "accessToken": "_JWT_ACCESS_TOKEN_",
            "refreshToken": "_JWT_REFRESH_TOKEN_"
        }

## [/auth/active_user]

### Retrieve user information associated with session token [GET]
+ Request
    + Headers

            Authentication: Bearer _JWT_ACCESS_TOKEN_

+ Response 200 (application/json)

        {
            "username": "TestUser",
            "uniqueId": "_USER_UUID_"
        }

## [/auth/refresh]

### Refresh JWT access token [POST]
+ Request
    + Headers

            Authentication: Bearer _JWT_REFRESH_TOKEN_

+ Response 200 (application/json)

        {
            "accessToken": "_JWT_NEW_ACCESS_TOKEN_"
        }

## [/auth/logout]

### End user session [POST]
+ Request
    + Headers

            Authentication: Bearer _JWT_ACCESS_TOKEN_

+ Response 200 (application/json)

        {
            "success": true
        }

# Group Teams

Manage teams.

## [/teams]

### Create a new team on behalf of user [POST]
+ Request (application/json)

        {
            "name": "TestTeam",
        }

    + Headers

            Authentication: Bearer _JWT_ACCESS_TOKEN_

+ Response 200 (application/json)

        {
            "name": "TestTeam",
            "slug": "test-team",
            "owner": {
                "username": "TestUser",
                "uniqueId": "_USER_UUID_"
            },
            "members": [{
                "username": "TestUser",
                "uniqueId": "_USER_UUID_"
            }]
        }

## [/teams/{slug}/members]

### Add/remove member(s) to team [PATCH]

+ Parameters
    + slug (string) - Unique team slug identifier

+ Request (application/json)

        {
            "add": ["_USER2_UUID_"]
        }

+ Response 200 (application/json)

        {
            "name": "TestTeam",
            "slug": "test-team",
            "owner": {
                "username": "TestUser",
                "uniqueId": "_USER_UUID_"
            },
            "members": [
                {
                    "username": "TestUser",
                    "uniqueId": "_USER_UUID_"
                },
                {
                    "username": "TestUser2",
                    "uniqueId": "_USER2_UUID_"
                }
            ]
        }

+ Request (application/json)

        {
            "remove": ["_USER2_UUID_"]
        }

+ Response 200 (application/json)

        {
            "name": "TestTeam",
            "slug": "test-team",
            "owner": {
                "username": "TestUser",
                "uniqueId": "_USER_UUID_"
            },
            "members": [
                {
                    "username": "TestUser",
                    "uniqueId": "_USER_UUID_"
                }
            ]
        }

## [/teams/{slug}/issue_statuses]

### Create a new issue status for a team [POST]
+ Parameters
    + slug (string) - Unique team slug identifier

+ Request (application/json)

        {
            "name": "Open",
            "description": "Awaiting assignment",
        }

    + Headers

            Authentication: Bearer _JWT_ACCESS_TOKEN_

+ Response 200 (application/json)

        {
            "uniqueId": "_STATUS_UUID_",
            "name": "Open",
            "description", "Awaiting assignment",
            "ordering": 0
        }


## [/teams/{slug}/issues]

### Create a new issue for a team [POST]
+ Parameters
    + slug (string) - Unique team slug identifier

+ Request (application/json)

        {
            "shortDescription": "Test Issue",
            "description": "optional",
            "statusUniqueId": "_STATUS_UUID_",
        }

    + Headers

            Authentication: Bearer _JWT_ACCESS_TOKEN_

+ Response 200 (application/json)

        {
            "uniqueId": "_ISSUE_UUID_",
            "shortDescription": "Test Issue",
            "description": "optional",
            "priority": 0,
            "status": {
                "uniqueId": "_STATUS_UUID_",
                "name": "Open",
                "ordering": 0,
                "description": "Awaiting assignment"
            },
            "createdBy": {
                "username": "TestUser",
                "uniqueId": "_USER_UUID_"
            },
            "assignedTo": {
                "username": "TestUser",
                "uniqueId": "_USER_UUID_"
            },
            "dateCreated": "20200501",
            "dateUpdated": "20200501",
        }

## [/teams/{slug}/issues{?filter}]

### List issues for a team [GET]

+ Parameters
    + slug (string) - Unique team slug identifier
    + filter (optional) - JSON-encoded list of shapes matching: { field, op, val }

+ Request (application/json)
    + Headers

            Authentication: Bearer _JWT_ACCESS_TOKEN_

+ Response 200 (application/json)

        [{
            "uniqueId": "_ISSUE_UUID_",
            "shortDescription": "Test Issue",
            "description": "optional",
            "priority": 0,
            "status": {
                "uniqueId": "_STATUS_UUID_",
                "name": "Open",
                "ordering": 0,
                "description": "Awaiting assignment"
            },
            "createdBy": {
                "username": "TestUser",
                "uniqueId": "_USER_UUID_"
            },
            "assignedTo": {
                "username": "TestUser",
                "uniqueId": "_USER_UUID_"
            },
            "dateCreated": "20200501",
            "dateUpdated": "20200501",
        }]

## [/teams/{slug}/issues/{issueUniqueId}]

+ Parameters
    + slug (string) - Unique team slug identifier
    + issueUniqueId (string) - UUID of issue

+ Request (application/json)
    + Headers

            Authentication: Bearer _JWT_ACCESS_TOKEN_

### Issue details [GET]

+ Response 200 (application/json)

        {
            "uniqueId": "_ISSUE_UUID_",
            "shortDescription": "Test Issue",
            "description": "optional",
            "priority": 0,
            "status": {
                "uniqueId": "_STATUS_UUID_",
                "name": "Open",
                "ordering": 0,
                "description": "Awaiting assignment"
            },
            "createdBy": {
                "username": "TestUser",
                "uniqueId": "_USER_UUID_"
            },
            "assignedTo": {
                "username": "TestUser",
                "uniqueId": "_USER_UUID_"
            },
            "dateCreated": "20200501",
            "dateUpdated": "20200501",
        }

### Update parts of an issue [PATCH]

+ Request (application/json)

        {
            "shortDescription": "Renamed Issue",
            "priority": 2
        }

+ Response 200 (application/json)

        {
            "uniqueId": "_ISSUE_UUID_",
            "shortDescription": "Renamed Issue",
            "description": "optional",
            "priority": 2,
            "status": {
                "uniqueId": "_STATUS_UUID_",
                "name": "Open",
                "ordering": 0,
                "description": "Awaiting assignment"
            },
            "createdBy": {
                "username": "TestUser",
                "uniqueId": "_USER_UUID_"
            },
            "assignedTo": {
                "username": "TestUser",
                "uniqueId": "_USER_UUID_"
            },
            "dateCreated": "20200501",
            "dateUpdated": "20200501",
        }

### Remove issue [DELETE]

+ Response 200 (application/json)

        {
            "success": true,
        }

## [/teams/{slug}/issues/{issueUniqueId}/comments]

+ Parameters
    + slug (string) - Unique team slug identifier
    + issueUniqueId (string) - UUID of issue

+ Request (application/json)
    + Headers

            Authentication: Bearer _JWT_ACCESS_TOKEN_

### Submit comment [POST]

+ Request (application/json)

        {
            "text": "Hello, world!",
        }

+ Response 200 (application/json)

        {
            "success": true,
        }

### List comments for issue [GET]

+ Response 200 (application/json)

        {
            "comments" [
                {
                    "text": "Hello, world!",
                    "timestamp": "2020-04-26 14:05:20.122244",
                    "user": {
                        "username": "TestUser",
                        "uniqueId": "_USER_UUID_"
                    }
                }
            ],
        }
